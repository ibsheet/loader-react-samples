// +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//                              TypeScript definition for IBSheet API usage
// +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

// ------------------------------------------------- Menus and dialogs ----------------------------------------
interface IBDialog {
  Close ? () : void;
  Area ? : any;
  Body ? : string;
  CanFocus ? : boolean | number;
  CloseAfter ? : boolean | number;
  CloseClick ? : boolean | number;
  CloseClickHeader ? : boolean | number;
  CloseOut ? : boolean | number;
  CloseTimeout ? : number;
  Foot ? : string;
  Head ? : string;
  HeadClose ? : boolean | number;
  Header ? : string;
  MaxHeight ? : number;
  MaxWidth ? : number;
  MinHeight ? : number;
  MinWidth ? : number;
  Modal ? : boolean | number;
  Position ? : IBPosition;
  Shadow ? : boolean | number;
  ShadowHeader ? : boolean | number;
  Tag ? : any;
  Wrap ? : number;
}

interface IBCalendar {
  Close ? () : void;
  OnButtonClick ? (button: number) : number;
  OnCanEditDate ? (date: Date) : boolean | number;
  onReadCanEditYM ? (year: number, month: number) : boolean | number;
  OnChange ? (date: any) : boolean | number;
  OnGetCalendarDate ? (date: Date, text: string, classes: string[], range: boolean | number) : string;
  OnSave ? (date: any) : boolean | number;
  Buttons ? : number;
  Buttons2 ? : number;
  Date ? : any;
  Range ? : boolean | number;
  ReadOnly ? : boolean | number;
  RowsNext ? : number;
  RowsPrev ? : number;
  Texts ? : any;
  TimeFormat ? : string;
  Weeks ? : number;
  Modal ? : boolean;
}

interface IBMenu {
  OnButton ? (button: string) : boolean | number;
  OnSave ? (Item: IBMenuItem, Data: string) : boolean | number;
  Buttons ? : string[];
  CollapseOther ? : boolean | number;
  Default ? : IBMenuItem;
  ExpandTime ? : number;
  Items ? : IBMenuItem[];
  SaveType ? : number;
  ShowHint ? : boolean | number;
}

interface IBMenuItem {
  OnChanged ? (Value: string) : string;
  OnClick ? () : boolean | number;
  Bool ? : number;
  Caption ? : boolean | number;
  CheckAll ? : boolean | number;
  ColumnSizes ? : string;
  Columns ? : number;
  Default ? : IBMenuItem;
  Disabled ? : boolean | number;
  Edit ? : boolean | number;
  Enum ? : boolean | number;
  Expanded ? : number;
  Group ? : number;
  GroupAll ? : number;
  Height ? : number;
  Hidden ? : number;
  Icon ? : string;
  IconWidth ? : number;
  Items ? : IBMenuItem[];
  Left ? : boolean | number;
  LeftHtml ? : string;
  LeftWidth ? : number;
  Level ? : boolean | number;
  Menu ? : boolean | number;
  Name ? : string;
  NoAll ? : boolean | number;
  RightHtml ? : string;
  RightWidth ? : number;
  Text ? : string;
  Uncheck ? : boolean | number;
  Value ? : boolean | number | string;
  Width ? : number;
}

interface IBPosition {
  Align ? : string;
  Height ? : number;
  Mouse ? : boolean | number;
  Move ? : boolean | number;
  Realign ? : boolean | number;
  Resize ? : boolean | number;
  Tag ? : any;
  Width ? : number;
  X ? : number;
  Y ? : number;
}

interface IBEdit {
  OnChange(Value: string, Old: string): void;
  OnKeyDown(key: string, event: Event, handled: boolean | number): void;
  OnStartEdit(): void;
}

// ------------------------------------------------- IBSheet ----------------------------------------
interface IBSheetCreateOptions {
  id: string;
  el: string | object;
  options: IBProperties;
  data ? : any[];
}

interface IBProperties {
  Cfg ? : IBSheetProperties;
  Def ? : object;
  LeftCols ? : IBCol[];
  Cols: IBCol[];
  RightCols ? : IBCol[];
  Solid ? : any[];
  Head ? : any[];
  Foot ? : any[];
  Events ? : IBSheetEvents;
}

interface IBData {
  data : any[];
}

interface IBCol {
  AcceptEnters ? : number;
  Align ? : string;
  AutoCalendar ? : boolean | number;
  BoolGroup ? : number;
  BoolIconWidth ? : number;
  BoolIcon ? : string | number;
  ButtonClass ? : string;
  Button ? : string;
  ButtonText ? : string;
  ButtonWidth ? : number;
  CalendarButtons ? : number;
  CanCopyPaste ? : boolean | number;
  CanEdit ? : boolean | number;
  CanEmpty ? : number;
  CanExport ? : number;
  CanFilter ? : number;
  CanFocus ? : number;
  CanGroup ? : number
  CanMove ? : number;
  CanResize ? : boolean | number;
  CanSelect ? : number;
  CanSort ? : boolean | number;
  CaseSensitive ? : boolean | number;
  Class ? : string;
  Clear ? : string;
  Color ? : string;
  Cursor ? : string;
  Defaults ? : string;
  Disabled ? : boolean | number;
  EditEnum ? : string;
  EditFormat ? : string;
  EditMask ? : string;
  EmptyValue ? : any;
  Enum ? : string;
  EnumKeys ? : string;
  EnumMenu ? : string;
  FocusCell ? : string;
  FocusRow ? : string;
  Format ? : string;
  Formula ? : string;
  GMT ? : boolean | number;
  GroupDef ? : string;
  GroupDeleted ? : boolean | number;
  GroupEmpty ? : number;
  GroupChar ? : string;
  GroupSingle ? : number;
  GroupSole ? : boolean | number;
  GroupWidth ? : number;
  HintValue ? : any;
  HtmlPostfix ? : string;
  HtmlPrefix ? : string;
  Icon ? : string;
  IconAlign ? : string;
  IconWidth ? : number;
  Indent ? : string;
  Link ? : string;
  LinkBase ? : string;
  LinkTarget ? : string;
  MaskColor ? : string;
  MaxChars ? : string;
  MaxWidth ? : number;
  Menu ? : string;
  MinWidth ? : number;
  Name: string;
  Header?: string | IBCol[] | string[];
  NoColor ? : boolean | number;
  NoUpload ? : number;
  NumberSort ? : boolean | number;
  readonly Pos ? : number;
  Radio ? : number;
  RadioIcon ? : number | string;
  RadioIconWidth ? : number;
  RadioUncheck ? : boolean | number;
  Range ? : boolean | number;
  RawSort ? : number;
  Refresh ? : string;
  Related ? : string;
  RelWidth ? : number;
  ResultMask ? : string;
  ResultMessage ? : string;
  ResultMessageTime ? : number;
  ResultText ? : string;
  Selected ? : boolean | number;
  ShowHint ? : number;
  Size ? : number;
  Spanned ? : boolean | number;
  Suggest ? : string;
  SuggestDelay ? : number;
  SuggestMin ? : number;
  SuggestType ? : string;
  TextColor ? : string;
  TextFont ? : string;
  TextSize ? : string;
  TextStyle ? : number;
  Tip ? : string;
  TipClass ? : string;
  TipPosition ? : string;
  Type ? : string;
  Uncheck ? : boolean | number;
  VAlign ? : string;
  Visible ? : boolean | number;
  Width ? : number;
  WidthPad ? : number;
  Wrap ? : boolean | number;
}

interface IBRow {
  id ? : string;
  Added ? : number;
  Align ? : string;
  AlternateClass ? : string;
  AlternateColor ? : string;
  CalcOrder ? : any;
  CanDrag ? : boolean | number;
  CanEdit ? : number;
  CanFilter ? : number;
  CanFocus ? : number;
  CanGroup ? : boolean | number;
  CanSelect ? : boolean | number;
  CanSort ? : boolean | number;
  Changed ? : number;
  Class ? : string;
  Color ? : string;
  Deleted ? : number;
  readonly Expanded ? : number;
  FocusCell ? : string;
  FocusRow ? : string;
  Height ? : number;
  readonly Hidden ? : boolean | number;
  HintValue ? : any;
  HtmlPostfix ? : string;
  HtmlPrefix ? : string;
  Indent ? : number;
  readonly Kind ? : string;
  Level ? : number;
  LeftHtml ? : string;
  MaxHeight ? : number;
  Menu ? : string;
  NoColor ? : number;
  NoUpload ? : number;
  Selected ? : number;
  ShowHint ? : number;
  readonly Spanned ? : boolean | number;
  SortPos ? : number;
  TextColor ? : string;
  TextFont ? : string;
  TextSize ? : number;
  TextStyle ? : number;
  Tip ? : string;
  TipClass ? : string;
  TipPosition ? : string;
  VAlign ? : string;
  readonly Visible ? : boolean | number;
  Wrap ? : boolean | number;
}

interface IBPage {
  Level ? : number;
  LevelImg ? : number;
  Name ? : string;
  Page ? : number;
  State ? : number;
  childNodes ? : object;
  firstChild ? : object;
  lastChild ? : object;
  nextSibling ? : object;
  nodeName ? : string;
  parentNode ? : object;
  previousSibling ? : object;
  tagName ? : string;
}

interface IBSheetProperties {
  readonly Cols ? : IBCol[];
  readonly Def ? : IBRow[];
  readonly FilterCount ? : number;
  readonly Rows ? : IBRow[];
  readonly SearchCount ? : number;
  readonly Solid ? : IBRow;

  AcceptEnters ? : number;
  Alternate ? : number;
  AlternateCount ? : number;
  AlternateStart ? : number;
  AlternateType ? : number;
  AutoCalendar ? : boolean | number;
  BorderCursors ? : number;
  CalcOrder ? : string;
  CenterMessage ? : number;
  ClearFilterOff ? : boolean | number;
  ColIndex ? : string;
  ColorState ? : number;
  CopyEdit ? : number;
  CopyPasteHidden ? : number;
  CustomScroll ? : number;
  DragCopy ? : boolean | number;
  EditErrorsMessageTime ? : number;
  EnterMode ? : number;
  Expanded ? : string;
  FilterIgnoreEmpty ? : number;
  FocusedCol ? : string;
  FocusWholeRow ? : number;
  Group ? : string;
  GroupMain ? : string;
  GroupSortMain ? : number;
  Hover ? : number;
  IgnoreFocused ? : boolean | number;
  IndexEnum ? : boolean | number;
  LeftCanResize ? : number;
  LeftWidth ? : number;
  LongClick ? : number;
  MainCol ? : string;
  MaxPages ? : number;
  MaxSort ? : number;
  MaxWidth ? : boolean | number;
  MessageWidth ? : number;
  MidWidth ? : number;
  MoveMessage ? : boolean | number;
  NoFormatEscape ? : boolean | number;
  NoHScroll ? : boolean | number;
  NoTreeLines ? : boolean | number;
  NoVScroll ? : boolean | number;
  PageLength ? : number;
  PasteCols ? : number;
  PasteFocused ? : number;
  PivotFunc ? : string;
  RightCanResize ? : number;
  RightWidth ? : number;
  ScrollLeft ? : number;
  ScrollTop ? : number;
  SearchCaseSensitive ? : boolean | number;
  SearchCells ? : boolean | number;
  SearchExpression ? : string;
  SelectingCells ? : number;
  ShiftHint ? : boolean | number;
  Size ? : string;
  SortIcons ? : number;
  CanSort ? : boolean | number;
  StandardTip ? : boolean | number;
  StaticCursor ? : boolean | number;
  Style ? : string;
  SuppressMessage ? : number;
  TabIndex ? : number;
  TabStop ? : number;
  TipStart ? : number;
  TouchScroll ? : number;
  Undo ? : number;
  UseButton ? : number;
  ZIndex ? : number;
}

interface IBSheetFunctions {
  acceptChangedData(row?: IBRow|{row?: IBRow}): void;
  addCol(name: string|{name: string, section?: number, pos?: number, param?: object, visible?: boolean}, section?: number, pos?: number, param?: object, visible?: boolean): IBCol;
  addRow(next?: IBRow|{next?: IBRow, visible?: boolean, focus?: boolean, parent?: IBRow, init?: object}, visible?: boolean, focus?: boolean, parent?: IBRow, init?: object): IBRow;
  addRows(count: number|{count: number, next?: IBRow, focus?: boolean, parent?: IBRow, valid?: boolean}, next?: IBRow, focus?: boolean, parent?: IBRow, valid?: boolean): void;
  ajax(url: string|{url: string, params?: string, method?: string, callback?: Function, sync?: boolean, reqHeader?: object, timeout?: number, traditional?: boolean}, params?: string, method?: string, callback?: Function, sync?: boolean, reqHeader?: object, timeout?: number, traditional?: boolean): void;
  applySaveResult(result: number|{result: number, message?: string, response?: object, files?: any[]}, message?: string, response?: object, files?: any[]): boolean;
  bind(name: string|{name: string, func: Function}, func?: Function): void;
  bindAll(func: Function|{func: Function}): void;
  blur(mode?: number|{mode?: number}): boolean;
  calculate(render?: boolean|{render?: boolean, calconly?: boolean}, calconly?: boolean): void;
  clear(): void;
  clearCurrentInfo(): boolean;
  clearFilter(): void;
  clearRange(range: any[]|{range: any[]}): void;
  clearSelection(): void;
  clearSort(): void;
  closeDialog(): void;
  copyRow(row?: IBRow|{row?: IBRow, next?: IBRow, empty?: boolean, parent?: IBRow, child?: boolean, forceVisible?: boolean}, next?: IBRow, empty?: boolean, parent?: IBRow, child?: boolean, forceVisible?: boolean): IBRow;
  copyRows(rows?: IBRow[]|{rows?: IBRow[], next?: IBRow, empty?: boolean, parent?: IBRow, child?: boolean, forceVisible?: boolean}, next?: IBRow, empty?: boolean, parent?: IBRow, child?: boolean, forceVisible?: boolean): IBRow[];
  createPivot(func?: Function|{func?: Function}): void;
  deleteCol(col: string|{col: string, del?: number, valid?: boolean}, del?: number, valid?: boolean): boolean;
  // deleteCols(cols?, del?: number|{cols?, del?: number}): void;
  deleteRow(row: IBRow|{row: IBRow, del?: number, valid?: boolean}, del?: number, valid?: boolean): boolean;
  deleteRows(rows: IBRow[]|{rows: IBRow[], del?: number}, del?: number): boolean;
  disable(hard?: boolean|{hard?: boolean}): void;
  dispose(): void;
  doFilter(cols?: string|{cols?: string, vals?: string, operators?: string, nofilter?: boolean, noclear?: boolean}, vals?: string, operators?: string, nofilter?: boolean, noclear?: boolean): void;
  doGroup(cols: string|{cols: string}): void;
  doPrint(prefix?: string|{prefix?: string, postfix?: string, pagePrefix?: string, pagePostfix?: string, fitPage?: number, zoomFit?: number, menu?: number, pdf?: object, test?: boolean}, postfix?: string, pagePrefix?: string, pagePostfix?: string, fitPage?: number, zoomFit?: number, menu?: number, pdf?: object, test?: boolean): void;
  doSave(url: string|{url: string, param?: string, saveMode?: number, col?: string, urlEncode?: boolean, delim?: string, queryMode?: number, reqHeader?: object, quest?: boolean, sync?: boolean, validRequired?: boolean, saveAttr?: string, useLevel?: boolean, questCallback?: Function, timeout?: number, traditional?: boolean}, param?: string, saveMode?: number, col?: string, urlEncode?: boolean, delim?: string, queryMode?: number, reqHeader?: object, quest?: boolean, sync?: boolean, validRequired?: boolean, saveAttr?: string, useLevel?: boolean, questCallback?: Function, timeout?: number, traditional?: boolean): void;
  doSearch(url: string|{url: string, param?: string, method?: string, append?: boolean, reqHeader?: object, callback?: Function, timeout?: number, sync?: boolean, next?: IBRow, strictParse?: boolean, traditional?: boolean}, param?: string, method?: string, append?: boolean, reqHeader?: object, callback?: Function, timeout?: number, sync?: boolean, next?: IBRow, strictParse?: boolean, traditional?: boolean): void;
  doSearchPaging(url: string|{url: string, pageParam?: string, param?: string, reqHeader?: object, method?: string, callback?: Function, timeout?: number, sync?: boolean, strictParse?: boolean, traditional?: boolean, restapi?: boolean}, pageParam?: string, param?: string, reqHeader?: object, method?: string, callback?: Function, timeout?: number, sync?: boolean, strictParse?: boolean, traditional?: boolean, restapi?: boolean): void;
  doSort(sortcols: string|{sortcols: string}): void;
  enable(): void;
  endEdit(save?: boolean|{save?: boolean}): any;
  exportData(fileName?: string|{fileName?: string, sheetName?: string, downRows?: string, downCols?: string, downTreeHide?: boolean, downHeader?: boolean, sheetDesign?: number, titleText?: string, userMerge?: string, excelRowHeight?: number, excelHeaderRowHeight?: number, wordWrap?: boolean, comboValidation?: boolean, downSum?: boolean, colDelim?: string, rowDelim?: string}, sheetName?: string, downRows?: string, downCols?: string, downTreeHide?: boolean, downHeader?: boolean, sheetDesign?: number, titleText?: string, userMerge?: string, excelRowHeight?: number, excelHeaderRowHeight?: number, wordWrap?: boolean, comboValidation?: boolean, downSum?: boolean, colDelim?: string, rowDelim?: string): void;
  findRows(action: string|{action: string}): void;
  findText(col: string|{col: string, searchText: string, startRow?: IBRow, matchMode?: number, caseSensitive?: boolean}, searchText?: string, startRow?: IBRow, matchMode?: number, caseSensitive?: boolean): IBRow;
  fitSize(col: string|{col: string, norender?: boolean, rows?: IBRow}, norender?: boolean, rows?: IBRow): void;
  focus(row?: IBRow|{row?: IBRow, col?: string, pagepos?: number}, col?: string, pagepos?: number): boolean;
  getAttribute(row?: IBRow|{row?: IBRow, col?: string, attr?: string}, col?: string, attr?: string): number|string;
  getBodyHeight(): number;
  getBodyWidth(section?: number|{section?: number}): number;
  getCanEdit(row: IBRow|{row: IBRow, col: string}, col?: string): number;
  getCanFocus(row: IBRow|{row: IBRow, col?: string}, col?: string): boolean;
  getCell(row: IBRow|{row: IBRow, col: string}, col?: string): object;
  getCellStyle(row: IBRow|{row: IBRow, col: string, styleAttr: string}, col?: string, styleAttr?: string): string;
  getChangedData(row?: IBRow|{row?: IBRow, attrs?: string[]}, attrs?: string[]): string;
  getChildRows(row: IBRow|{row: IBRow}): IBRow[];
  getColByIndex(index: number|{index: number}): string;
  getColIndex(col: string|{col: string}): number;
  getColLeft(col: string|{col: string}): number;
  getCols(attr1?: string|{attr1?: string, attr2?: string}, attr2?: string): string[];
  getCountInfoElement(): HTMLElement;
  getCurrentInfo(): string;
  getDataRows(noSubTotal?: boolean|{noSubTotal?: boolean}): IBRow[];
  getEditCol(): string;
  getEditRow(): IBRow;
  getEditText(): string;
  getFilter(spec?: boolean|{spec?: boolean}): object;
  getFirstCol(section?: number|{section?: number}): string;
  getFirstRow(row?: IBRow|{row?: IBRow}): IBRow;
  getFirstVisibleRow(row?: IBRow|{row?: IBRow}): IBRow;
  getFixedTop(): number;
  getFocusedCol(): string;
  getFocusedPage(): IBPage;
  getFocusedRow(): IBRow;
  getFormat(row: IBRow|{row: IBRow, col: string, edit?: boolean}, col?: string, edit?: boolean): string;
  getFormulaRowPosition(): number;
  getGroupRows(): object;
  getHeaderRows(): IBRow[];
  getLastCol(section?: number|{section?: number}): string;
  getLastRow(row?: IBRow|{row?: IBRow}): IBRow;
  getLastVisibleRow(row?: IBRow|{row?: IBRow}): IBRow;
  getLocale(): string;
  getMessage(key: string|{key: string, type?: string}, type?: string): string;
  getMouseCol(): string;
  getMouseRow(): IBRow;
  getNextCol(col: string|{col: string}): string;
  getNextRow(row: IBRow|{row: IBRow}): IBRow;
  getNextShift(row: IBRow|{row: IBRow, cnt?: number}, cnt?: number): IBRow;
  getNextSiblingRow(row: IBRow|{row: IBRow}): IBRow;
  getNextSiblingVisibleRow(row: IBRow|{row: IBRow}): IBRow;
  getNextVisibleRow(row: IBRow|{row: IBRow}): IBRow;
  getPageByIndex(index: number|{index: number}): IBPage;
  getPageByRow(row: IBRow|{row: IBRow}): IBPage;
  getPageIndex(page: IBPage|{page: IBPage}): number;
  getPageIndexByRow(row: IBRow|{row: IBRow}): number;
  getParentRows(row: IBRow|{row: IBRow}): IBRow[];
  getPrevCol(col: string|{col: string}): string;
  getPrevRow(row: IBRow|{row: IBRow}): IBRow;
  getPrevShift(row: IBRow|{row: IBRow, cnt?: number}, cnt?: number): IBRow;
  getPrevSiblingRow(row: IBRow|{row: IBRow}): IBRow;
  getPrevSiblingVisibleRow(row: IBRow|{row: IBRow}): IBRow;
  getPrevVisibleRow(row: IBRow|{row: IBRow}): IBRow;
  getPrintable(func?: Function|{func?: Function}): void;
  getRowById(id: string|{id: string}): IBRow;
  getRowByIndex(index: number|{index: number}): IBRow;
  getRowHeight(row: IBRow|{row: IBRow}): void;
  getRowIndex(row: IBRow|{row: IBRow}): number;
  getRowKind(row: IBRow|{row: IBRow}): string;
  getRowTop(row: IBRow|{row: IBRow}): number;
  getRowsByChecked(col: string|{col: string}): IBRow[]|boolean;
  getRowsByDup(cols: string|{cols: string, firstOnly?: boolean, emptyVal?: boolean, subsum?: boolean}, firstOnly?: boolean, emptyVal?: boolean, subsum?: boolean): IBRow[];
  getRowsByStatus(status: string|{status: string}): IBRow[];
  getRowsFromPage(page: IBPage|{page: IBPage, pos?: number}, pos?: number): IBRow;
  getSaveJson(saveMode?: number|{saveMode?: number, col?: string, validRequired?: boolean, showAlert?: boolean, saveAttr?: string, useLevel?: boolean, formData?: boolean}, col?: string, validRequired?: boolean, showAlert?: boolean, saveAttr?: string, useLevel?: boolean, formData?: boolean): object[];
  getSaveString(saveMode?: number|{saveMode?: number, col?: string, urlEncode?: boolean, delim?: string, queryMode?: number, validRequired?: boolean, prefix?: string, showAlert?: boolean}, col?: string, urlEncode?: boolean, delim?: string, queryMode?: number, validRequired?: boolean, prefix?: string, showAlert?: boolean): string;
  getScrollLeft(section?: number|{section?: number}): number;
  getScrollTop(): number;
  getSelectedRanges(rowtype?: number|{rowtype?: number, coltype?: number}, coltype?: number): object;
  getSelectedRows(type?: number|{type?: number, attr?: string}, attr?: string): any[];
  getShownCols(section?: number|{section?: number}): string[];
  getShownRows(): IBRow[];
  getSpanned(row: IBRow|{row: IBRow, col: string}, col?: string): void;
  getString(row: IBRow|{row: IBRow, col: string}, col?: string): string;
  getSubTotalRows(): object;
  getTotalRowCount(): number;
  getType(row: IBRow|{row: IBRow, col: string}, col?: string): string;
  getUserData(): any[];
  getUserOptions(mode?: boolean|{mode?: boolean}): object|null;
  getValue(row: IBRow|{row: IBRow, col: string}, col?: string): number|string;
  goToNextPage(): boolean;
  goToPage(page?: IBPage|{page?: IBPage}): void;
  goToPageByIndex(index: number|{index: number}): void;
  goToPrevPage(): boolean;
  hasChangedData(): number;
  hasFilter(): void;
  hideCol(col: string|{col: string, userhidden?: boolean, merge?: boolean}, userhidden?: boolean, merge?: boolean): void;
  hideFilterRow(): void;
  hideHint(): void;
  hideMessage(): void;
  hideRow(row: IBRow|{row: IBRow, del?: boolean, norender?: boolean, nomerge?: boolean}, del?: boolean, norender?: boolean, nomerge?: boolean): void;
  hideTip(): void;
  importData(append?: boolean|{append?: boolean, fileExt?: string, mode?: string, startRow?: number, startCol?: number, workSheetName?: string, workSheetNo?: number, columnMapping?: string, colSeparator?: string, encoding?: string}, fileExt?: string, mode?: string, startRow?: number, startCol?: number, workSheetName?: string, workSheetNo?: number, columnMapping?: string, colSeparator?: string, encoding?: string): void;
  initPopupDialog(opt: IBDialog|{opt: IBDialog, pos: IBPosition, sheet: IBSheetInstance, etcopt?: object}, pos?: IBPosition, sheet?: IBSheetInstance, etcopt?: object): void;
  isFocused(row: IBRow|{row: IBRow, col?: string}, col?: string): boolean;
  loadSearchData(data: any[]|{data: any[], append?: boolean, callback?: Function, sync?: boolean, next?: IBRow}, append?: boolean, callback?: Function, sync?: boolean, next?: IBRow): void;
  // makePivotTable(criterias?, init?: object|{criterias?, init?: object, format?: string, type?: string}, format?: string, type?: string): void;
  makeSubTotal(subTotalRows: object[]|{subTotalRows: object[]}): void;
  moveCol(col: string|{col: string, tocol: string, right?: boolean, norender?: boolean}, tocol?: string, right?: boolean, norender?: boolean): boolean;
  moveRow(row: IBRow|{row: IBRow, next: IBRow, render?: boolean, parent?: IBRow, spannedMove?: boolean}, next?: IBRow, render?: boolean, parent?: IBRow, spannedMove?: boolean): boolean;
  off(name: string|{name: string}): void;
  offAll(): void;
  on(name: string|{name: string, func: Function}, func?: Function): void;
  onAll(func: Function|{func: Function}): void;
  refreshCell(row: IBRow|{row: IBRow, col: string}, col?: string): void;
  refreshPage(page: IBPage|{page: IBPage, always?: boolean}, always?: boolean): void;
  refreshRow(row: IBRow|{row: IBRow}): void;
  reload(): void;
  reloadData(func?: Function|{func?: Function}): void;
  removeAll(): void;
  removeCol(col: string|{col: string}): void;
  removePage(page: IBPage|{page: IBPage}): boolean;
  removeRow(row: IBRow|{row: IBRow, nomerge?: boolean, norender?: boolean}, nomerge?: boolean, norender?: boolean): void;
  removeRows(row: IBRow[]|{row: IBRow[]}): void;
  removeSubTotal(): void;
  renderBody(): void;
  rerender(scroll?: boolean|{scroll?: boolean, sync?: boolean}, sync?: boolean): void;
  revertData(remainAddRow?: boolean): void;
  revertCell(row: IBRow|{row: IBRow, col: string, render?: boolean}, col?: string, render?: boolean): void;
  revertRow(row: IBRow|{row: IBRow, render?: boolean}, render?: boolean): void;
  saveCurrentInfo(): boolean;
  selectAllRows(select?: boolean|{select?: boolean}): boolean;
  selectCell(row: IBRow|{row: IBRow, col: string, select?: boolean, valid?: boolean}, col?: string, select?: boolean, valid?: boolean): boolean;
  selectCol(col: string|{col: string, select?: boolean, valid?: boolean}, select?: boolean, valid?: boolean): boolean;
  selectRange(row1?: IBRow|{row1?: IBRow, col1?: string, row2?: IBRow, col2?: string, select?: boolean, type?: number, valid?: boolean}, col1?: string, row2?: IBRow, col2?: string, select?: boolean, type?: number, valid?: boolean): number;
  selectRow(row: IBRow|{row: IBRow, select?: boolean, valid?: boolean}, select?: boolean, valid?: boolean): boolean;
  setAllCheck(col: string|{col: string, val: boolean, ignoreEvent?: boolean}, val?: boolean, ignoreEvent?: boolean): string;
  setAttribute(row?: IBRow|{row?: IBRow, col?: string, attr: string, val: any, render?: boolean}, col?: string, attr?: string, val?: any, render?: boolean): void;
  setAutoMerge(dataMerge?: number|{dataMerge?: number, headerMerge?: number, prevColumnMerge?: number}, headerMerge?: number, prevColumnMerge?: number): void;
  setAutoMergeCancel(mode?: string|{mode?: string}): void;
  setCellStyle(row: IBRow|{row: IBRow, col: string, styleAttr: object, render?: boolean}, col?: string, styleAttr?: object, render?: boolean): void;
  setCheck(row: IBRow|{row: IBRow, col: string, val: boolean, valid?: boolean}, col?: string, val?: boolean, valid?: boolean): boolean;
  setColWidth(col: string|{col: string, dx?: number}, dx?: number): void;
  setCountInfoElement(element: HTMLElement|string): boolean;
  setCurrentInfo(info: string|{info: string}): boolean;
  setDebugger(debugOption: string|{debugOption: string}): string;
  setExpandRow(row: IBRow|{row: IBRow, col?: string, expand?: boolean}, col?: string, expand?: boolean): boolean;
  setFilter(name?: string|{name?: string, filter?: string, render?: boolean}, filter?: string, render?: boolean): any[];
  setFixedCols(left?: number|{left?: number, right?: number, reMerge?: boolean}, right?: number, reMerge?: boolean): boolean[];
  setFixedLeft(count?: number|{count?: number, reMerge?: boolean}, reMerge?: boolean): boolean;
  setFixedRight(count?: number|{count?: number, reMerge?: boolean}, reMerge?: boolean): boolean;
  setFixedTop(count?: number|{count?: number, render?: boolean}, render?: boolean): boolean;
  setFormulaRow(val: string|object|{val: string|object, cols?: string, visible?: boolean, render?: boolean}, cols?: string, visible?: boolean, render?: boolean): boolean;
  setFormulaRowPosition(pos: number|{pos: number, norender?: boolean}, norender?: boolean): boolean;
  setIconCheck(row: IBRow|{row: IBRow, col: string, val: boolean}, col?: string, val?: boolean): void;
  setInfoRow(visible?: boolean|{visible?: boolean, layout?: string[], space?: string, format?: string, render?: boolean}, layout?: string[], space?: string, format?: string, render?: boolean): void;
  setLocale(code: string|{code: string, load?: boolean, path?: string, render?: boolean}, load?: boolean, path?: string, render?: boolean): boolean;
  setMaxHeight(val?: number|{val?: number}): void;
  setMergeCancel(row: IBRow|{row: IBRow, col: string}, col?: string): void;
  setMergeRange(row1: IBRow|{row1: IBRow, col1: string, row2: IBRow, col2: string}, col1?: string, row2?: IBRow, col2?: string): void;
  setMergeSubTotal(): void;
  setMessage(key: string|{key: string, type: string, message: string}, type?: string, message?: string): object;
  setScrollLeft(pos: number|{pos: number, section?: number}, section?: number): boolean;
  setScrollTop(pos: number|{pos: number}): boolean;
  setString(row: IBRow|{row: IBRow, col: string, val: string, render?: boolean}, col?: string, val?: string, render?: boolean): void;
  setTheme(prefix: string|{prefix: string, csspath: string, render?: boolean}, csspath?: string, render?: boolean): void;
  setValue(row: IBRow|{row: IBRow, col: string, val: any, render?: boolean}, col?: string, val?: any, render?: boolean): boolean;
  showCalendar(row: IBRow|{row: IBRow, col: string, calendar?: IBCalendar, pos?: IBPosition, func?: Function, date?: string, always?: boolean}, col?: string, calendar?: IBCalendar, pos?: IBPosition, func?: Function, date?: string, always?: boolean): IBCalendar;
  showCol(col?: string|{col?: string, merge?: boolean}, merge?: boolean): void;
  showDialog(row: IBRow|{row: IBRow, col: string, dialog: IBDialog, pos?: IBPosition, always?: boolean}, col?: string, dialog?: IBDialog, pos?: IBPosition, always?: boolean): IBDialog;
  showFilterRow(): void;
  showHint(row: IBRow|{row: IBRow, col: string, staticMode?: boolean}, col?: string, staticMode?: boolean): boolean;
  showMenu(row: IBRow|{row: IBRow, col: string, menu: IBMenu, pos?: IBPosition, func?: Function, init?: string[], always?: boolean}, col?: string, menu?: IBMenu, pos?: IBPosition, func?: Function, init?: string[], always?: boolean): IBMenu|null;
  showMessage(message: string|{message: string, importance?: number, type?: number}, importance?: number, type?: number): void;
  showMessageTime(message: string|{message: string, time?: number, func?: Function, buttons?: string[], importance?: number}, time?: number, func?: Function, buttons?: string[], importance?: number): void;
  showPopupMenu(menu: IBMenu|{menu: IBMenu, func?: Function}, func?: Function): void;
  showPopupSheet(row?: IBRow|{row?: IBRow, col?: string, data: any[], width?: number, height?: number, dialog?: IBDialog, pos?: IBPosition}, col?: string, data?: any[], width?: number, height?: number, dialog?: IBDialog, pos?: IBPosition): IBMenu|null;
  showProgress(caption: string|{caption: string, text: string, cancel?: string, pos?: number, cnt?: number}, text?: string, cancel?: string, pos?: number, cnt?: number): void;
  showRow(row: IBRow|{row: IBRow, norender?: boolean}, norender?: boolean): void;
  showTip(tip: string|{tip: string}): void;
  showTreeLevel(level: number|{level: number, ignoreEvent?: boolean, childMode?: number}, ignoreEvent?: boolean, childMode?: number): void;
  startEdit(row?: IBRow|{row?: IBRow, col?: string, empty?: boolean, valid?: boolean}, col?: string, empty?: boolean, valid?: boolean): void;
  switchPivotSheet(pivot?: Function|{pivot?: Function}): void;
  syncHeaderCheck(): void;
  unbind(name: string|{name: string}): void;
  unbindAll(): void;
  updateClientPaging(length: number|{length: number, render?: boolean}, render?: boolean): boolean;
  version(): string;
}

interface IBSheetEvents {
  onAfterCalculate(evtParams:{sheet: IBSheetInstance, show: boolean, row: IBRow, col: string, eventName: string}): void;
  onAfterChange(evtParams:{sheet: IBSheetInstance, row: IBRow, col: string, val: any, eventName: string}): void;
  onAfterChangeProgress(evtParams:{sheet: IBSheetInstance, messageTag: object, caption: string, text: string, cancel: string, pos: number, cnt: number, rate: number, eventName: string}): void;
  onAfterClick(evtParams:{sheet: IBSheetInstance, row: IBRow, col: string, x: number, y: number, event: Event, canState: string, cellType: string, part: string, partType: string, section: string, kind: string, eventName: string}): void;
  onAfterColMove(evtParams:{sheet: IBSheetInstance, col: string}): void;
  onAfterColResize(evtParams:{sheet: IBSheetInstance, col: string, row: IBRow, chg: number, eventName: string}): void;
  onAfterColsAdd(evtParams:{sheet: IBSheetInstance, cols: string[], tocol: string, right: string, empty: string, eventName: string}): boolean;
  onAfterEdit(evtParams:{sheet: IBSheetInstance, row: IBRow, col: string, val: string, eventName: string}): string;
  onAfterExpand(evtParams:{sheet: IBSheetInstance, row: IBRow, eventName: string}): void;
  onAfterFilter(evtParams:{sheet: IBSheetInstance, type: number, eventName: string}): void;
  onAfterGotoPage(evtParams:{sheet: IBSheetInstance, eventName: string}): boolean;
  onAfterGroup(evtParams:{sheet: IBSheetInstance, eventName: string}): boolean;
  onAfterRowAdd(evtParams:{sheet: IBSheetInstance, row: IBRow, eventName: string}): void;
  onAfterRowCopy(evtParams:{sheet: IBSheetInstance, row: IBRow, source: IBRow, empty: boolean, eventName: string}): void;
  onAfterRowDelete(evtParams:{sheet: IBSheetInstance, row: IBRow, type: number, eventName: string}): void;
  onAfterRowMove(evtParams:{sheet: IBSheetInstance, row: IBRow, oldparent: IBRow, oldnext: IBRow, eventName: string}): number;
  onAfterRowMoveToSheet(evtParams:{sheet: IBSheetInstance, row: IBRow, tosheet: IBSheetInstance, torow: IBRow, copy: boolean, eventName: string}): number;
  onAfterSave(evtParams:{sheet: IBSheetInstance, result: number, message: string, response: object}): void;
  onAfterSectionResize(evtParams:{sheet: IBSheetInstance, section: number, eventName: string}): void;
  onAfterSort(evtParams:{sheet: IBSheetInstance, eventName: string}): void;
  onBeforeCalculate(evtParams:{sheet: IBSheetInstance, show: boolean, row: IBRow, col: string}): boolean;
  onBeforeChange(evtParams:{sheet: IBSheetInstance, row: IBRow, col: string, val: any, oldval: any}): string;
  onBeforeDataLoad(evtParams:{sheet: IBSheetInstance, result: string, data: any[], message: string, response: object, eventName: string}): boolean;
  onBeforeExpand(evtParams:{sheet: IBSheetInstance, row: IBRow, eventName: string}): boolean;
  onBeforeExport(evtParams:{sheet: IBSheetInstance, type: string, formElem: object, eventName: string}): boolean;
  onBeforeFilter(evtParams:{sheet: IBSheetInstance, type: number, eventName: string}): boolean;
  onBeforeFocus(evtParams:{sheet: IBSheetInstance, row: IBRow, col: string, orow: IBRow, ocol: string, rect: any[], orect: any[]}): boolean;
  onBeforeGoToPage(evtParams:{sheet: IBSheetInstance, page: IBPage, pagepos: number, eventName: string}): boolean;
  onBeforeGroup(evtParams:{sheet: IBSheetInstance, group: string, eventName: string}): boolean;
  onBeforePaste(evtParams:{sheet: IBSheetInstance, cols: string[], pastedtext: string[], eventName: string}): boolean;
  onBeforeRowDelete(evtParams:{sheet: IBSheetInstance, row: IBRow, type: number, rows: IBRow[], eventName: string}): boolean;
  onBeforeSave(evtParams:{sheet: IBSheetInstance, source: object}): boolean;
  onBeforeSelect(evtParams:{sheet: IBSheetInstance, row: IBRow, deselect: boolean, cols: string[], eventName: string}): boolean;
  onBeforeSelectAll(evtParams:{sheet: IBSheetInstance, select: number, type: number, eventName: string}): boolean;
  onBeforeSend(evtParams:{sheet: IBSheetInstance, source: object, data: string, func: Function, eventName: string}): any;
  onBeforeSort(evtParams:{sheet: IBSheetInstance, col: string, sort: string, eventName: string}): number;
  onBlur(evtParams:{sheet: IBSheetInstance, orow: IBRow, ocol: string, orect: any[], eventName: string}): void;
  onButtonClick(evtParams:{sheet: IBSheetInstance, row: IBRow, col: string, x: number, y: number, eventName: string}): boolean;
  onCalculateCell(evtParams:{sheet: IBSheetInstance, show: boolean, row: IBRow, col: string, val: any}): any;
  onCanDrop(evtParams:{sheet: IBSheetInstance, row: IBRow, tosheet: IBSheetInstance, torow: IBRow, type: number, copy: boolean, rows: IBRow[], eventName: string}): boolean;
  onClick(evtParams:{sheet: IBSheetInstance, row: IBRow, col: string, x: number, y: number, event: Event, canState: string, cellType: string, part: string, partType: string, section: string, kind: string, eventName: string}): void;
  onColResize(evtParams:{sheet: IBSheetInstance, col: string, eventName: string}): boolean;
  onDataLoad(evtParams:{sheet: IBSheetInstance, result: string, message: string, response: object, eventName: string}): void;
  onDblClick(evtParams:{sheet: IBSheetInstance, row: IBRow, col: string, x: number, y: number, event: Event, canState: string, cellType: string, part: string, partType: string, section: string, kind: string, eventName: string}): boolean;
  onEndDrag(evtParams:{sheet: IBSheetInstance, row: IBRow, tosheet: IBSheetInstance, torow: IBRow, type: number, x: number, y: number, copy: boolean, rows: IBRow[], eventName: string}): number;
  onEndEdit(evtParams:{sheet: IBSheetInstance, row: IBRow, col: string, save: boolean, val: any, raw: string, eventName: string}): any;
  onExportFinish(evtParams:{sheet: IBSheetInstance, type: string, result: boolean, eventName: string}): void;
  onFocus(evtParams:{sheet: IBSheetInstance, row: IBRow, col: string, orow: IBRow, ocol: string, rect: any[], orect: any[]}): void;
  onHideMessage(evtParams:{sheet: IBSheetInstance, eventName: string}): void;
  onIconClick(evtParams:{sheet: IBSheetInstance, row: IBRow, col: string, x: number, y: number, eventName: string}): boolean;
  onImportFinish(evtParams:{sheet: IBSheetInstance, type: string, data: any[], eventName: string}): void;
  onKeyDown(evtParams:{sheet: IBSheetInstance, key: number, event: Event, name: string, prefix: string, eventName: string}): boolean;
  onKeyPress(evtParams:{sheet: IBSheetInstance, key: number, event: Event, name: string, prefix: string, eventName: string}): void;
  onKeyUp(evtParams:{sheet: IBSheetInstance, key: number, event: Event, name: string, prefix: string, eventName: string}): void;
  onLinkClick(evtParams:{sheet: IBSheetInstance, row: IBRow, col: string, url: string, target: string, eventName: string}): boolean;
  onLongClick(evtParams:{sheet: IBSheetInstance, row: IBRow, col: string, x: number, y: number, event: Event, canState: string, cellType: string, part: string, partType: string, section: string, kind: string, eventName: string}): boolean;
  onMouseDown(evtParams:{sheet: IBSheetInstance, row: IBRow, col: string, x: number, y: number, event: Event, canState: string, cellType: string, part: string, partType: string, section: string, kind: string, eventName: string}): boolean;
  onMouseMove(evtParams:{sheet: IBSheetInstance, row: IBRow, col: string, x: number, y: number, event: Event, canState: string, cellType: string, part: string, partType: string, section: string, kind: string, eventName: string}): boolean;
  onMouseOver(evtParams:{sheet: IBSheetInstance, row: IBRow, col: string, orow: IBRow, ocol: string, event: Event, canState: string, cellType: string, part: string, partType: string, section: string, kind: string, ocanState: string, ocellType: string, opart: string, opartType: string, osection: string, okind: string, eventName: string}): void;
  onMouseUp(evtParams:{sheet: IBSheetInstance, row: IBRow, col: string, x: number, y: number, event: Event, canState: string, cellType: string, part: string, partType: string, section: string, kind: string, eventName: string}): boolean;
  onReadCanEditDate(evtParams:{sheet: IBSheetInstance, row: IBRow, col: string, date: Date, eventName: string}): boolean;
  onReadCanEditMY(evtParams:{sheet: IBSheetInstance, row: IBRow, col: string, year: number, month: number, eventName: string}): boolean;
  onReadDate(evtParams:{sheet: IBSheetInstance, row: IBRow, col: string, date: Date, text: string, classes: any[], range: any[], eventName: string}): string;
  onReadDefaults(evtParams:{sheet: IBSheetInstance, row: IBRow, col: string, defaults: object, eventName: string}): any;
  onReadEnum(evtParams:{sheet: IBSheetInstance, row: IBRow, col: string, enum: string, eventName: string}): string;
  onReadEnumKeys(evtParams:{sheet: IBSheetInstance, row: IBRow, col: string, enumkeys: string, eventName: string}): string;
  onReadFilteringValue(evtParams:{sheet: IBSheetInstance, row: IBRow, col: string, val: any, eventName: string}): any;
  onReadMenu(evtParams:{sheet: IBSheetInstance, row: IBRow, col: string, menu: IBMenu, eventName: string}): any;
  onReadSuggest(evtParams:{sheet: IBSheetInstance, row: IBRow, col: string, suggest: string, eventName: string}): any;
  onRenderFinish(evtParams:{sheet: IBSheetInstance, eventName: string}): void;
  onRenderFirstFinish(evtParams:{sheet: IBSheetInstance, eventName: string}): void;
  onRenderPageFinish(evtParams:{sheet: IBSheetInstance, row: IBPage, eventName: string}): void;
  onRenderPageStart(evtParams:{sheet: IBSheetInstance, row: IBPage, eventName: string}): void;
  onRenderStart(evtParams:{sheet: IBSheetInstance, eventName: string}): boolean;
  onResize(evtParams:{sheet: IBSheetInstance, oldwidth: number, oldheight: number, width: number, height: number, eventName: string}): void;
  onResultMask(evtParams:{sheet: IBSheetInstance, row: IBRow, col: string, val: string, errors: object}): number;
  onRightClick(evtParams:{sheet: IBSheetInstance, row: IBRow, col: string, x: number, y: number, event: Event, canState: string, cellType: string, part: string, partType: string, section: string, kind: string, eventName: string}): boolean;
  onRightLongClick(evtParams:{sheet: IBSheetInstance, row: IBRow, col: string, x: number, y: number, event: Event, canState: string, cellType: string, part: string, partType: string, section: string, kind: string, eventName: string}): boolean;
  onRowAdd(evtParams:{sheet: IBSheetInstance, row: IBRow, eventName: string}): void;
  onRowFilter(evtParams:{sheet: IBSheetInstance, row: IBRow, show: boolean, eventName: string}): boolean;
  onRowLoad(evtParams:{sheet: IBSheetInstance, row: IBRow, eventName: string}): boolean;
  onSave(evtParams:{sheet: IBSheetInstance}): void;
  onScroll(evtParams:{sheet: IBSheetInstance, hpos: number, vpos: number, oldhpos: number, oldvpos: number, hpos0: number, oldhpos0: number, hpos2: number, oldhpos2: number, eventName: string}): void;
  onSearchFinish(evtParams:{sheet: IBSheetInstance, eventName: string}): void;
  onSectionResize(evtParams:{sheet: IBSheetInstance, section: number}): void;
  onSelectFile(evtParams:{sheet: IBSheetInstance, type: string, filename: string, eventName: string}): boolean;
  onSelectMenu(evtParams:{sheet: IBSheetInstance, row: IBRow, col: string, result: string, eventName: string}): void;
  onShowCol(evtParams:{sheet: IBSheetInstance, col: string, hide: boolean, eventName: string}): boolean;
  onShowDefaults(evtParams:{sheet: IBSheetInstance, row: IBRow, col: string, menu: IBMenu, pos: IBPosition, eventName: string}): void;
  onShowEdit(evtParams:{sheet: IBSheetInstance, row: IBRow, col: string, val: string, eventName: string}): string;
  onShowEditEnum(evtParams:{sheet: IBSheetInstance, row: IBRow, col: string, editenum: string, eventName: string}): string;
  onShowEnumMenu(evtParams:{sheet: IBSheetInstance, row: IBRow, col: string, enummenu: string, eventName: string}): string;
  onShowHint(evtParams:{sheet: IBSheetInstance, row: IBRow, col: string, hint: object, reason: number, eventName: string}): string;
  onShowMenu(evtParams:{sheet: IBSheetInstance, row: IBRow, col: string, menu: IBMenu, position: IBPosition, eventName: string}): boolean;
  onShowMessage(evtParams:{sheet: IBSheetInstance, messageTag: object, message: string, isConfirm: boolean, time: number, buttons: string[], callback: Function}): boolean;
  onShowTip(evtParams:{sheet: IBSheetInstance, row: IBRow, col: string, tip: string, clientX: number, clientY: number, x: number, y: number, eventName: string}): string;
  onStartDrag(evtParams:{sheet: IBSheetInstance, row: IBRow, col: string, more: boolean, copy: boolean, rows: IBRow[], eventName: string}): boolean;
  onStartEdit(evtParams:{sheet: IBSheetInstance, row: IBRow, col: string, eventName: string}): boolean;
  onSuggest(evtParams:{sheet: IBSheetInstance, row: IBRow, col: string, val: string, suggest: string, eventName: string}): any;
  onVScrollEndPoint(evtParams:{sheet: IBSheetInstance, vpos: number, oldvpos: number, eventName: string}): void;
  onBeforeFileDown(evtParams:{sheet: IBSheetInstance, row: IBRow, col: string, path: string, value: string, eventName: string}): boolean;
}

type IBSheetInstance = IBSheetProperties & IBSheetFunctions;

// ------------------------------------------------- Global ----------------------------------------
interface IBSheetStatic {
  readonly Active: IBSheetInstance;
  readonly Focused: IBSheetInstance;
  readonly BChrome: boolean;
  readonly BEdge: boolean;
  readonly BIE: boolean;
  readonly BIE5: boolean;
  readonly BIE8Strict: boolean;
  readonly BIE9Strict: boolean;
  readonly BIE10Strict: boolean;
  readonly BIEA: boolean;
  readonly BIEA6: boolean;
  readonly BIEA8: boolean;
  readonly BIEA9: boolean;
  readonly BIEA10: boolean;
  readonly BIEA11: boolean;
  readonly BIEM: boolean;
  readonly BIEO8: boolean;
  readonly BIEO89: boolean;
  readonly BIEStrict: boolean;
  readonly BIEVER: number;
  readonly BOpera: boolean;
  readonly BOpera8: boolean;
  readonly BOperaVer: number;
  readonly BSafari: boolean;
  readonly BSafariMac: boolean;
  readonly BSafariMac4Event: boolean;
  readonly BSafariVer: number;
  readonly BSafariWin: boolean;
  readonly BStrict: boolean;
  g_LoadExcelBuffer: any[];
  g_LoadExcelBufferExt: string;
  g_LoadExcelSheetID: any[];
  g_Multipart: boolean;
  g_down2ExcelBuffer: string;
  g_isDirectDown2Excel: boolean;
  g_isDirectLoadExcel: boolean;
  g_isDown2ExcelBuffer: boolean;
  g_isLoadExcelBuffer: boolean;
  g_targetExcelSheetID: string;
  g_targetTextSheetID: string;
  v7: IBSheet7Convert;
  blur(all?: boolean): any;
  calcBit(num: number, mode?: number): object;
  cancelEvent(ev?: Event, type?: number): any;
  clearCache(id: string, ses?: any): any;
  create(id: string|IBSheetCreateOptions, el?: string|object, options?: IBProperties, data?: object[]): IBSheetInstance;
  dateToString(val: Date|number|object|string, format?:string, type?: number): string;
  disposeAll(dialogs?: boolean, unload?: boolean): any;
  get(row: IBRow, prop: string): any;
  getGMT(): number;
  getLocale(): string;
  getSheetPath(): string;
  is(row: IBRow, prop: string): any;
  loadCache(id: string, ses?: any): any;
  numberToString(val: number|string, format?:string, type?: number): string;
  removeHTMLTag(html: string, mode?: number): any;
  saveCache(id: string, val: string, ses?: any): any;
  setGMT(gmt: number): any;
  showCalendar(calendar: IBCalendar, pos: IBPosition, func?: Function, date?: Date|number|object|string): IBCalendar;
  showDialog(dialog: IBDialog, pos: IBPosition, parent?: any, help?: boolean): IBDialog;
  showMenu(memu: IBMenu, pos: IBPosition, func?: Function, init?: any, content?: any): IBMenu;
  showPopup(dialog: IBDialog, func?: Function, init?: any): IBDialog;
  stringToDate(val: string, format?: string, type?: any, gmt?: boolean): Date;
  stringToNumber(val: string, format?: string, type?: any): number;
  version(): string;
}

interface IBSheet7Convert {
  IBS_Calendar(id?: any, format?: any): any;
  IBS_ConcatSaveName(sheet: IBSheetInstance): any;
  IBS_CopyForm2Sheet(param: object): any;
  IBS_CopySheet2Form(param: object): any;
  IBS_FormQueryString(form: string|object, checkRequired?: boolean|number, encoding?: boolean|number): any;
  IBS_FormToJson(form: string|object, checkRequired?: boolean|number, encoding?: boolean|number): any;
  IBS_FromToCalendar(id?: any, format?: any): any;
  IBS_GetLabel(obj: object): any;
  IBS_GetName(obj: object): any;
  IBS_RequiredChk(obj: object): any;
  IBS_ShowErrMsg(sMsg: string): any;
  convertAcceptKeys(objColumn: IBCol, str: string): any;
  convertDateFormat(obj: object): any;
  convertTreeData(data7: any[]): any[];
}

interface IBSheetId {
  [id: string]: IBSheetInstance;
}

interface IBSheetIndex {
  [index: number]: IBSheetInstance;
}

type IBSheetGlobal = IBSheetStatic & IBSheetIndex & IBSheetId;

interface Window {
  IBSheet: IBSheetGlobal;
}